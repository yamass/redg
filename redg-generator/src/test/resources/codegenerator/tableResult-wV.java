/*
 * This file was generated by RedG.
 * https://yamass.github.io/redg
 *       ____           ________
 *      / __ \___  ____/ / ____/
 *     / /_/ / _ \/ __  / / __
 *    / _, _/  __/ /_/ / /_/ /
 *   /_/ |_|\___/\__,_/\____/
 *
 * DO NOT EDIT MANUALLY!
 * Re-run the code generation to reflect database changes.
 */
package de.yamass.redg.generated;

import java.util.ArrayList;
import java.util.List;

import de.yamass.redg.runtime.*;
import de.yamass.redg.models.*;

/**
 * <table summary="The table model attributes and their values">
 *     <tr>
 *         <td><strong>Attribute</strong></td>
 *         <td><strong>Value</strong></td>
 *     </tr>
 *     <tr>
 *         <td>Table name</td>
 *         <td>DEMO_USER</td>
 *     </tr>
 *     <tr>
 *         <td>Full table name</td>
 *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
 *     </tr>
 * </table>
 */
public class GDemoUser implements RedGEntity {

    protected AbstractRedG redG;

    // do not manually make this public and instantiate it directly. Use the RedG Main class
    GDemoUser(AbstractRedG redG, java.lang.String dtype, GDemoCompany worksAtDemoCompany) {
        this.redG = redG;
        this.dtype = dtype;
        this.modifiedFields.add("dtype");
        if (worksAtDemoCompany == null) {
            throw new IllegalArgumentException("worksAtDemoCompany may not be null!");
        }
        this.worksAtDemoCompany = worksAtDemoCompany;


        try {
            this.id = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("ID"), java.math.BigDecimal.class);
            this.username = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("USERNAME"), java.lang.String.class);
            this.firstName = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("FIRST_NAME"), java.lang.String.class);
            this.lastName = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("LAST_NAME"), java.lang.String.class);
            this.dayTs = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("DAY_TS"), java.sql.Timestamp.class);

        } catch (Exception e) {
            throw new RuntimeException("Could not get default value", e);
        }
    }

    GDemoUser(AbstractRedG redG, GDemoCompany worksAtDemoCompany) {
        // dummy constructor (without explicit attributes)
        this(
                redG,
                redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("DTYPE"), java.lang.String.class),
                worksAtDemoCompany
        );
    }

    GDemoUser(boolean generateDefaultValues, AbstractRedG redG) {
        // First parameter exists simply because this constructor needs a different signature from the constructor above if the tables have no NOT NULL FK
        // Only for ExistingGDemoUser and usage with Supplier-Functions , otherwise NOT NULL constraints cannot be checked and no default values are generated.
        this.redG = redG;
        if (generateDefaultValues) {
            try {
                this.id = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("ID"), java.math.BigDecimal.class);
                this.username = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("USERNAME"), java.lang.String.class);
                this.firstName = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("FIRST_NAME"), java.lang.String.class);
                this.lastName = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("LAST_NAME"), java.lang.String.class);
                this.dayTs = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("DAY_TS"), java.sql.Timestamp.class);

            } catch (Exception e) {
                throw new RuntimeException("Could not get default value", e);
            }
        }
    }

    private java.lang.String dtype;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>DTYPE</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public GDemoUser dtype(java.lang.String value) {
        if (value == null) {
            throw new IllegalArgumentException("Setting dtype to null violates a NOT NULL constraint!");
        }
        this.dtype = value;
        this.modifiedFields.add("dtype");
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>DTYPE</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public java.lang.String dtype() {
        return this.dtype;
    }

    private java.math.BigDecimal id;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>ID</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>NUMERIC</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>true</td>
     *     </tr>
     * </table>
     */
    public GDemoUser id(java.math.BigDecimal value) {
        if (value == null) {
            throw new IllegalArgumentException("Setting id to null violates a NOT NULL constraint!");
        }
        this.id = value;
        this.modifiedFields.add("id");
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>ID</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>NUMERIC</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>true</td>
     *     </tr>
     * </table>
     */
    public java.math.BigDecimal id() {
        return this.id;
    }

    private java.lang.String username;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>USERNAME</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public GDemoUser username(java.lang.String value) {
        if (value == null) {
            throw new IllegalArgumentException("Setting username to null violates a NOT NULL constraint!");
        }
        this.username = value;
        this.modifiedFields.add("username");
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>USERNAME</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public java.lang.String username() {
        return this.username;
    }

    private java.lang.String firstName;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>FIRST_NAME</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public GDemoUser firstName(java.lang.String value) {
        this.firstName = value;
        this.modifiedFields.add("firstName");
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>FIRST_NAME</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public java.lang.String firstName() {
        return this.firstName;
    }

    private java.lang.String lastName;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>LAST_NAME</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public GDemoUser lastName(java.lang.String value) {
        this.lastName = value;
        this.modifiedFields.add("lastName");
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>LAST_NAME</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>CHARACTER VARYING</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public java.lang.String lastName() {
        return this.lastName;
    }

    private java.sql.Timestamp dayTs;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>DAY_TS</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>TIMESTAMP</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public GDemoUser dayTs(java.sql.Timestamp value) {
        this.dayTs = value;
        this.modifiedFields.add("dayTs");
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>DAY_TS</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>TIMESTAMP</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>false</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>false</td>
     *     </tr>
     * </table>
     */
    public java.sql.Timestamp dayTs() {
        return this.dayTs;
    }


    private GDemoCompany worksAtDemoCompany;

    /**
     * This is a foreign key referencing {@link GDemoCompany}
     */
    public GDemoUser worksAtDemoCompany(GDemoCompany value) {
        if (value == null) {
            throw new IllegalArgumentException("Setting worksAtDemoCompany to null violates a NOT NULL constraint!");
        }
        this.worksAtDemoCompany = value;
        this.modifiedFields.add("worksAtDemoCompany");
        return this;
    }

    /**
     * This is a foreign key referencing {@link GDemoCompany}
     */
    public GDemoCompany worksAtDemoCompany() {
        return this.worksAtDemoCompany;
    }


    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>WORKS_AT</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>NUMERIC</td>
     *     </tr>
     * </table>
     */
    public java.math.BigDecimal worksAt() {
        return this.worksAtDemoCompany.id();
    }

    public List<RedGEntity> getDependencies() {
        List<RedGEntity> dependencies = new ArrayList<>();
        if (worksAtDemoCompany != null) dependencies.add(worksAtDemoCompany);
        return dependencies;
    }


    public String getSQLString() {
        return String.format("INSERT INTO \"DEMO_USER\" (" +
                        "\"WORKS_AT\"" +
                        "" +
                        ", " +
                        "\"DTYPE\", \"ID\", \"USERNAME\", \"FIRST_NAME\", \"LAST_NAME\", \"DAY_TS\"" +
                        ") VALUES (" +
                        "%s" +
                        "" +
                        ", " +
                        "%s, %s, %s, %s, %s, %s)",
                this.redG.getSqlValuesFormatter().formatValue(this.worksAtDemoCompany.id(),
                        "NUMERIC", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "WORKS_AT"),
                this.redG.getSqlValuesFormatter().formatValue(this.dtype(),
                        "CHARACTER VARYING", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "DTYPE"),
                this.redG.getSqlValuesFormatter().formatValue(this.id(),
                        "NUMERIC", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "ID"),
                this.redG.getSqlValuesFormatter().formatValue(this.username(),
                        "CHARACTER VARYING", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "USERNAME"),
                this.redG.getSqlValuesFormatter().formatValue(this.firstName(),
                        "CHARACTER VARYING", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "FIRST_NAME"),
                this.redG.getSqlValuesFormatter().formatValue(this.lastName(),
                        "CHARACTER VARYING", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "LAST_NAME"),
                this.redG.getSqlValuesFormatter().formatValue(this.dayTs(),
                        "TIMESTAMP", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER",
                        "DEMO_USER", "DAY_TS")
        );
    }

    public String getPreparedStatementString() {
        return "INSERT INTO \"DEMO_USER\" (" +
                "\"WORKS_AT\"" +
                "" +
                ", " +
                "\"DTYPE\", \"ID\", \"USERNAME\", \"FIRST_NAME\", \"LAST_NAME\", \"DAY_TS\"" +
                ") VALUES (" +
                "?" +
                "" +
                ", " +
                "?, ?, ?, ?, ?, ?)";
    }

    public Object[] getPreparedStatementValues() {
        return new Object[]{
                this.worksAtDemoCompany.id(),
                this.dtype(),
                this.id(),
                this.username(),
                this.firstName(),
                this.lastName(),
                this.dayTs()
        };
    }

    public AttributeMetaInfo[] getPreparedStatementValuesMetaInfos() {
        return new AttributeMetaInfo[]{
                new AttributeMetaInfo("WORKS_AT", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "NUMERIC", 2, java.math.BigDecimal.class, true),
                new AttributeMetaInfo("DTYPE", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "CHARACTER VARYING", 12, java.lang.String.class, true),
                new AttributeMetaInfo("ID", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "NUMERIC", 2, java.math.BigDecimal.class, true),
                new AttributeMetaInfo("USERNAME", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "CHARACTER VARYING", 12, java.lang.String.class, true),
                new AttributeMetaInfo("FIRST_NAME", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "CHARACTER VARYING", 12, java.lang.String.class, false),
                new AttributeMetaInfo("LAST_NAME", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "CHARACTER VARYING", 12, java.lang.String.class, false),
                new AttributeMetaInfo("DAY_TS", "DEMO_USER", "TESTENABLEVISUALIZATION.PUBLIC.DEMO_USER", "TIMESTAMP", 93, java.sql.Timestamp.class, false)
        };
    }

    private static String serializedTableModel = "rO0ABXNyACBkZS55YW1hc3MucmVkZy5tb2RlbHMuVGFibGVNb2RlbL+0Cs2MvQwOAgAKWgAYaGFzQ29sdW1uc0FuZEZvcmVpZ25LZXlzTAAJY2xhc3NOYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7TAAHY29sdW1uc3QAEExqYXZhL3V0aWwvTGlzdDtMAAtmb3JlaWduS2V5c3EAfgACTAATaW5jb21pbmdGb3JlaWduS2V5c3EAfgACTAAXam9pblRhYmxlU2ltcGxpZmllckRhdGF0AA9MamF2YS91dGlsL01hcDtMAARuYW1lcQB+AAFMAAtwYWNrYWdlTmFtZXEAfgABTAALc3FsRnVsbE5hbWVxAH4AAUwAB3NxbE5hbWVxAH4AAXhwAXQACUdEZW1vVXNlcnNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAHdwQAAAAHc3IAIWRlLnlhbWFzcy5yZWRnLm1vZGVscy5Db2x1bW5Nb2RlbNxb0tCXjsJzAgAMWgARZXhwbGljaXRBdHRyaWJ1dGVaAAdub3ROdWxsWgAQcGFydE9mRm9yZWlnbktleVoAEHBhcnRPZlByaW1hcnlLZXlaAAZ1bmlxdWVMABJjb252ZW5pZW5jZVNldHRlcnNxAH4AAkwACGRhdGFUeXBldAAlTGRlL3lhbWFzcy9yZWRnL21vZGVscy9EYXRhVHlwZU1vZGVsO0wAD2RiRnVsbFRhYmxlTmFtZXEAfgABTAAGZGJOYW1lcQB+AAFMAAtkYlRhYmxlTmFtZXEAfgABTAAQamF2YVByb3BlcnR5TmFtZXEAfgABTAAMamF2YVR5cGVOYW1lcQB+AAF4cAEBAAAAc3IAH2phdmEudXRpbC5Db2xsZWN0aW9ucyRFbXB0eUxpc3R6uBe0PKee3gIAAHhwc3IAI2RlLnlhbWFzcy5yZWRnLm1vZGVscy5EYXRhVHlwZU1vZGVswgiOwMeuoVoCABVaABFhdXRvSW5jcmVtZW50YWJsZVoACmVudW1lcmF0ZWRaABNmaXhlZFByZWNpc2lvblNjYWxlSQAMbWF4aW11bVNjYWxlSQAMbWluaW11bVNjYWxlWgAIbnVsbGFibGVJABFudW1QcmVjaXNpb25SYWRpeEoACXByZWNpc2lvbloACHVuc2lnbmVkTAAIYmFzZVR5cGVxAH4ACUwAEGNyZWF0ZVBhcmFtZXRlcnNxAH4AAUwAGGRhdGFiYXNlU3BlY2lmaWNUeXBlTmFtZXEAfgABTAAQZGVmYXVsdEphdmFDbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7TAAKZW51bVZhbHVlc3EAfgACTAAPamF2YVNxbFR5cGVOYW1lcQB+AAFMAA1saXRlcmFsUHJlZml4cQB+AAFMAA1saXRlcmFsU3VmZml4cQB+AAFMAA1sb2NhbFR5cGVOYW1lcQB+AAFMAARuYW1lcQB+AAFMAAZ2ZW5kb3JxAH4AAUwAEHZlbmRvclR5cGVOdW1iZXJ0ABNMamF2YS9sYW5nL0ludGVnZXI7eHAAAAAAAAAAAAAAAAEAAAAAAAAAADuaygAAcHQABkxFTkdUSHQAEUNIQVJBQ1RFUiBWQVJZSU5HdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwc3EAfgAGAAAAAHcEAAAAAHh0AAdWQVJDSEFSdAABJ3EAfgAXcQB+ABJxAH4AEnQACGphdmEuc3Fsc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAx0AChURVNURU5BQkxFVklTVUFMSVpBVElPTi5QVUJMSUMuREVNT19VU0VSdAAFRFRZUEV0AAlERU1PX1VTRVJ0AAVkdHlwZXQAEGphdmEubGFuZy5TdHJpbmdzcQB+AAgAAQABAXEAfgAMc3EAfgANAQABAAB//wAAAAABAAAACgAAAAAAAYagAHB0AA9QUkVDSVNJT04sU0NBTEV0AAdOVU1FUklDdnIAFGphdmEubWF0aC5CaWdEZWNpbWFsVMcVV/mBKE8DAAJJAAVzY2FsZUwABmludFZhbHQAFkxqYXZhL21hdGgvQmlnSW50ZWdlcjt4cQB+ABpzcQB+AAYAAAAAdwQAAAAAeHEAfgAkcHBxAH4AJHEAfgAkcQB+ABhzcQB+ABkAAAACcQB+ABx0AAJJRHEAfgAedAACaWR0ABRqYXZhLm1hdGguQmlnRGVjaW1hbHNxAH4ACAABAAAAcQB+AAxxAH4AEHEAfgAcdAAIVVNFUk5BTUVxAH4AHnQACHVzZXJuYW1lcQB+ACBzcQB+AAgAAAAAAHEAfgAMcQB+ABBxAH4AHHQACkZJUlNUX05BTUVxAH4AHnQACWZpcnN0TmFtZXEAfgAgc3EAfgAIAAAAAABxAH4ADHEAfgAQcQB+ABx0AAlMQVNUX05BTUVxAH4AHnQACGxhc3ROYW1lcQB+ACBzcQB+AAgAAQEAAHEAfgAMcQB+ACJxAH4AHHQACFdPUktTX0FUcQB+AB50AAd3b3Jrc0F0cQB+ACxzcQB+AAgAAAAAAHEAfgAMc3EAfgANAAAAAAAACQAAAAABAAAAAAAAAAAAAAAdAHB0AAVTQ0FMRXQACVRJTUVTVEFNUHZyABJqYXZhLnNxbC5UaW1lc3RhbXAmGNXIAVO/ZQIAAUkABW5hbm9zeHIADmphdmEudXRpbC5EYXRlaGqBAUtZdBkDAAB4cHNxAH4ABgAAAAB3BAAAAAB4cQB+ADx0AAtUSU1FU1RBTVAgJ3EAfgAXcQB+ADxxAH4APHEAfgAYc3EAfgAZAAAAXXEAfgAcdAAGREFZX1RTcQB+AB50AAVkYXlUc3QAEmphdmEuc3FsLlRpbWVzdGFtcHhzcQB+AAYAAAABdwQAAAABc3IAJWRlLnlhbWFzcy5yZWRnLm1vZGVscy5Gb3JlaWduS2V5TW9kZWyLeghYiNBsPwIABFoAB25vdE51bGxMABBqYXZhUHJvcGVydHlOYW1lcQB+AAFMAAxqYXZhVHlwZU5hbWVxAH4AAUwACnJlZmVyZW5jZXNxAH4AA3hwAXQAEndvcmtzQXREZW1vQ29tcGFueXQADEdEZW1vQ29tcGFueXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABcQB+ADdzcgArZGUueWFtYXNzLnJlZGcubW9kZWxzLkZvcmVpZ25LZXlDb2x1bW5Nb2RlbPdm/lnppTzkAgAISQAKc3FsVHlwZUludEwAD2RiRnVsbFRhYmxlTmFtZXEAfgABTAAGZGJOYW1lcQB+AAFMAAtkYlRhYmxlTmFtZXEAfgABTAAKZGJUeXBlTmFtZXEAfgABTAAJbG9jYWxOYW1lcQB+AAFMAAlsb2NhbFR5cGVxAH4AAUwAF3ByaW1hcnlLZXlBdHRyaWJ1dGVOYW1lcQB+AAF4cAAAAAJxAH4AHHEAfgA3cQB+AB5xAH4AJHQAB3dvcmtzQXRxAH4ALHQAAmlkeHhzcQB+AAYAAAAAdwQAAAAAeHNxAH4ASz9AAAAAAAAAdwgAAAAQAAAAAHh0AAhEZW1vVXNlcnQAGGRlLnlhbWFzcy5yZWRnLmdlbmVyYXRlZHEAfgAccQB+AB4=";
    private static TableModel tableModel;

    public static String getSerializedTableModel() {
        return serializedTableModel;
    }

    public static TableModel getTableModel() {
        if (tableModel == null) {
            byte[] data = java.util.Base64.getDecoder().decode(serializedTableModel);
            try {
                java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(data));
                tableModel = (TableModel) ois.readObject();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        return tableModel;
    }
    private java.util.Set<String> modifiedFields = new java.util.HashSet<>();

    public java.util.Set<String> getModifiedFields() {
        return this.modifiedFields;
    }
}